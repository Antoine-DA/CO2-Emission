#region librairies

from sklearn.model_selection import train_test_split
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import OneHotEncoder
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestRegressor

#endregion

#region option
pd.set_option('display.max_columns', None)
pd.set_option('display.float_format', '{:.2f}'.format)
warnings.filterwarnings('ignore')
#endregion

#region sidebar
st.sidebar.title("Sommaire")
pages= ['üë®‚ÄçüíªContexte',"üñºÔ∏è Cadre de l'analyse des donn√©es",'üßπ Nettoyage des donn√©es','üìà Data Visualisation', 'üè≠ Pre-processing','ü§ñ Mod√©lisation','üìö Conclusion']
page=st.sidebar.radio('Allez vers', pages)

st.markdown(
    """
    <style>
    [data-testid="stSidebar"] {
        background-color: #7AA95C; /* Couleur de fond personnalis√©e */
    }
    </style>
    """,
    unsafe_allow_html=True
)

#region members
# Sidebar title
st.sidebar.title("Membres du projet :")

# Liste des membres avec leurs liens GitHub et LinkedIn
members = [
    {"name": "Antoine BARBIER",
    "github": "https://github.com/Antoine-DA",
    "linkedin": "https://www.linkedin.com/in/antoine-barbier-83654415b/"},
    {"name": "Flora BREN",
    "github": "https://github.com/bobmartin",
    "linkedin": "https://www.linkedin.com/in/flora-b-68a80013a"},
    {"name": "Thibault EL MANSOURI",
    "github": "https://github.com/thibanso",
    "linkedin": "https://www.linkedin.com/in/el-mansouri-299932130/"},
]

# G√©n√©rer la liste des membres dans la sidebar
for member in members:
    st.sidebar.markdown(f"""
    <div style="display: flex; align-items: center; margin-bottom: 10px;">
        <div style="flex: 1;">{member['name']}</div>
        <a href="{member['github']}" target="_blank" style="margin-right: 8px;">
            <img src="https://cdn-icons-png.flaticon.com/32/25/25231.png" width="20" alt="GitHub">
        </a>
        <a href="{member['linkedin']}" target="_blank">
            <img src="https://cdn-icons-png.flaticon.com/32/174/174857.png" width="20" alt="LinkedIn">
        </a>
    </div>
    """, unsafe_allow_html=True)
#endregion
#endregion

if page == pages[0]: #Contexte
    st.title("Projet pr√©dictions d'√©mission de CO2")
    st.write("### Introduction")
    st.write("""Le dioxyde de carbone, commun√©ment appel√© CO2, est un composant vital de notre atmosph√®re qui
joue un r√¥le essentiel dans le soutien de la vie sur Terre. Cependant, au fil des ans, les activit√©s
humaines ont consid√©rablement augment√© les niveaux de CO2 dans l‚Äôatmosph√®re, entra√Ænant de
graves cons√©quences pour l‚Äôenvironnement. En 2022, les √©missions mondiales de CO2 ont atteint un
niveau record de plus de 36,8 gigatonnes.\n
Les √©missions de CO2 ont des co√ªts √©conomiques importants, et notamment en termes de sant√©
publique, de d√©gradation de l'environnement et de changement climatique.
En effet, les √©missions de CO2 contribuent √† la pollution de l'air, ce qui peut entra√Æner des probl√®mes
de sant√© tels que des maladies respiratoires et cardiovasculaires. Les co√ªts associ√©s aux soins de
sant√© pour traiter ces maladies peuvent √™tre consid√©rables.\n
Elles contribuent aussi au changement climatique, ce qui peut entra√Æner des ph√©nom√®nes
m√©t√©orologiques extr√™mes, tels que des temp√™tes, des inondations et des s√©cheresses. Ces
√©v√©nements peuvent causer des dommages importants aux infrastructures, aux cultures agricoles et
aux √©cosyst√®mes, entra√Ænant des co√ªts √©conomiques √©lev√©s.\n
Certains secteurs √©conomiques, tels que l'agriculture, le tourisme et l'√©nergie, sont particuli√®rement
vuln√©rables aux impacts du changement climatique. Par exemple, les changements dans les r√©gimes
de pr√©cipitations peuvent affecter les rendements agricoles, tandis que les destinations touristiques
peuvent √™tre impact√©es par des conditions m√©t√©orologiques extr√™mes.\n
Le Groupe d'experts intergouvernemental sur l'√©volution du climat (GIEC) a publi√© des rapports
d√©taillant les √©missions de CO2 par secteur, y compris le secteur des transports. Selon le GIEC, environ
15% des √©missions mondiales de gaz √† effet de serre proviennent directement du secteur des
transports. Parmi ces √©missions, environ 70% sont attribu√©es au transport routier, ce qui inclut les
voitures particuli√®res.\n
Les gouvernements et les entreprises doivent investir dans des mesures d'adaptation et de mitigation
pour faire face aux impacts du changement climatique.\n
En identifiant les v√©hicules les plus polluants et en comprenant les caract√©ristiques techniques
responsables de la pollution, les constructeurs automobiles pourraient utiliser ces informations pour
am√©liorer la conception de leurs v√©hicules et investir dans l'innovation afin de r√©duire les √©missions
de CO2.\n
Un mod√®le de pr√©diction des √©missions de CO2 pourrait permettre de pr√©voir les niveaux de pollution
pour de nouveaux types de v√©hicules, aidant ainsi √† r√©duire les co√ªts √©conomiques et
environnementaux associ√©s aux √©missions de CO2.""")
        
if page == pages[1]: #Cadre analyse des donn√©es
    st.header("Cadre de l'analyse de donn√©es")
    url = "https://www.data.gouv.fr/fr/datasets/emissions-de-co2-et-de-polluants-des-vehicules-commercialises-en-france/"
    with st.expander('1.1 - Premier jeu de donn√©es'):
        st.markdown("""
        Le premier fichier porte sur les √©missions de CO2, de polluants et les caract√©ristiques des v√©hicules 
        commercialis√©s en France relatif √† l‚Äôann√©e 2014. Ce fichier est disponible librement sur le site de
        [data.gouv.fr](%s) et s‚Äôintitule ¬´mars-2014-complete.csv¬ª.
        
        Il est accompagn√© d‚Äôun dictionnaire des variables permettant d‚Äôavoir la d√©finition des abr√©viations et
        les unit√©s de mesures utilis√©es. Toutefois la seule lecture des l√©gendes est apparue insuffisante afin
        de comprendre certaines caract√©ristiques techniques des v√©hicules, il a donc √©t√© proc√©d√© √† des
        recherches compl√©mentaires afin d‚Äôavoir une lecture optimale du jeu de donn√©es.
        
        Il a √©t√© renomm√© df_fr pour la premi√®re partie d‚Äôobservation du fichier.
        
        Ce premier jeu de donn√©es comporte 55 044 lignes et 30 colonnes.
        Il contient les informations ci-dessous:
        """ % url)
        df=pd.read_excel('tableau.xlsx', sheet_name='df_fr')
        st.dataframe(df)
    url = "https://www.eea.europa.eu/en/datahub/datahubitem-view/fa8b1229-3db6-495d-b18e-9c9b3267c02b"
    with st.expander('2.2 - Deuxi√®me jeu de donn√©es'):
        st.markdown("""
        Un second jeu de donn√©es porte sur les √©missions de CO2 des v√©hicules produits en Europe relatif √†
        l‚Äôann√©e 2023. Ce fichier est disponible librement sur le site [European Environment Agency3](%s) et
        s‚Äôintitule ¬´data.csv¬ª.
        
        Il est accompagn√© d‚Äôun dictionnaire des variables permettant d‚Äôavoir la d√©finition des abr√©viations et
        les unit√©s de mesures utilis√©es. Sur le m√™me principe que le premier jeu de donn√©es, ce dictionnaire a
        √©t√© compl√©t√© par des d√©finitions afin d‚Äôavoir une meilleure lecture du jeu de donn√©es.
        
        Il a √©t√© renomm√© df_eu pour la premi√®re partie d‚Äôobservation du fichier.

        Il contient les informations suivantes :""" % url)
        df = pd.read_excel('tableau.xlsx', sheet_name='df_eu')
        st.dataframe(df)
    st.markdown("""
    Les deux fichiers contiennent des informations int√©ressantes et utiles pour alimenter le sujet.

    La qualit√© du premier jeu de donn√©es est bonne car il poss√®de tr√®s peu de NaN. Mais nous avons not√©
    toutefois que ce fichier contenait des informations datant de 2014 ce qui semble trop √©loign√© de la
    r√©alit√© des √©missions de CO2 produites par les nouvelles g√©n√©rations de v√©hicules.

    Le second fichier df_eu contient une colonne intitul√©e ¬´country¬ª et nous permet de constater que
    les informations relatives √† la France sont inclus dans ce fichier. Les informations sont relatives √†
    l‚Äôann√©e 2023, cela nous permet donc d‚Äôavoir des donn√©es plus r√©centes.
    Nous avons not√© √©galement la pr√©sence √©galement de deux colonnes relatives √† la mesure des
    √©missions de CO2 :
    
    -Enedc (g/km) Specific CO2 Emissions (NEDC).\n
    -Ewltp (g/km) Specific CO2 Emissions (WLTP).
    
    En 2017, la norme de mesure des √©missions de CO2 (NEDC4) est devenue obsol√®te et a √©t√© remplac√©e
    par la norme (WLTP5). Cette norme offre une mesure plus pr√©cise et r√©aliste des √©missions de CO2 et
    de la consommation de carburant des v√©hicules, refl√©tant mieux les conditions de conduite r√©elles.
    C‚Äôest une donn√©e importante pour notre √©tude dont la variable cible est l‚Äô√©mission de CO2.
    
    La r√©cence des donn√©es, la multiplicit√© des types de v√©hicule et la mesure utilis√©e pour les √©missions
    de CO2 contenu dans le fichier df_eu sont des param√®tres qui nous sont apparus plus pertinent pour
    notre sujet.\n
    Le jeu de donn√©es conserv√© pour cette √©tude est donc le fichier df_eu.
    """)

if page == pages[2]: #Nettoyage des donn√©es
    with st.expander('2.1 Suppression des colonnes vides'):
        st.markdown(""" 
Nous avons dans un premier temps supprim√© toutes les colonnes vides, colonnes qui contenaient
toujours les m√™mes valeurs, ou les colonnes qui n'apportent aucune information en rapport avec
l‚Äôobjet de notre √©tude.

Nous avons donc supprim√© les colonnes : MMS, r , Enedc (g/km), W (mm), At1 (mm), At2 (mm),
Ernedc (g/km), De, Vf, Status, year, Date of registration. """)
        st.code("""#Suppression des colonnes inutiles pour le mod√®le
drop_col = ['Country','VFN','Mp','Mh','Man','Tan','T','Va','Ve','Mk','Cn','IT','ech','RLFI']
""")
        
    with st.expander('2.2 Suppression des doublons avant nettoyage'):
        st.markdown("""Nous avons par la suite identifi√© et supprim√© les doublons sur les colonnes restantes. Cela nous a
permis de r√©duire drastiquement la taille de notre jeu de donn√©es.""")
        df = pd.DataFrame({'Nombre colonne':[39,27],'Nombre ligne':['10 734 656','1 804 116'],'Taille du fichier (Mo)':['2 450 Mo','388 Mo']}, index=['Tableau avant supression','Tableau apr√®s suppression'])
        df
        st.code("""df_eu = df_eu.drop(columns=drop_col)
                """)

if page == pages[5]: #Mod√©lisation
    #region Titre formulaire
    st.markdown(f"""
              <style>
              .centered {{
                  display: flex;
                    justify-content: center;
                    align-items: center;
                    height: 12vh;
                    font-size: 40px;
                    font-weight: bold;
                    background-color: #7AA95C; 
                    color: white;  
                    border-radius: 10px;
                    padding: 20px;
              }}
              </style>
              <div class="centered"> Pr√©diction des √©missions de CO2 </div>
              """,unsafe_allow_html=True)
    #endregion
    
    #region Formulaire
    with st.form(key='prediction_form'):
        #category = st.selectbox("Cat√©gorie de v√©hicule",('Tourisme','Utilitaire'),index=None,placeholder="Selectionner la cat√©gorie de v√©hicule")
        category = st.segmented_control(label= 'Cat√©gorie', options=['Tourisme','Utilitaire'])
        masse = st.number_input("Poids du v√©hicule (en Kg)",min_value=500.0, max_value= 5000.0, value = 1500.0, step=50.0)
        #fuel = st.selectbox("Motorisation",['Essence','Diesel','Essence hybride non-rechargeable','Essence hybride rechargeable','Diesel hybride rechargeable','Diesel hybride rechargeable','GPL','Gaz naturel','E85 non-rechargeable','E85 FlexiFuel'], index=None, placeholder='S√©lectionner la motorisation')
        fuel = st.segmented_control(label="Motorisation",options=['Essence','Diesel','Essence hybride non-rechargeable','Essence hybride rechargeable','Diesel hybride rechargeable','Diesel hybride rechargeable','GPL','Gaz naturel','E85 non-rechargeable','E85 FlexiFuel'])

        autonomie_electrique = st.number_input("Autonomie √©lectrique (km)", min_value=0.0, max_value=700.0, value=0.0, step=5.0)
        capacite_moteur = st.number_input("Capacit√© du moteur (cm3)",min_value=500.0, max_value=8000.0,value=1500.0,step=50.0)
        puiss_moteur = st.number_input("Puissance du moteur(KW)", min_value=5.0, max_value=1200.0, value=110.0, step=10.0)
        reduc_emission = st.number_input("Technologie de r√©duction d'√©mission (g/km)",min_value=0.0, max_value=10.0, value=0.0, step = 0.1)
        consommation = st.number_input("Consommation du moteur (l/100)",min_value=0.0, max_value=30.0, value=6.0, step=0.1)
        
        submit_button = st.form_submit_button(label="Pr√©dire")
    #endregion
    
    #region encodage, chargement du fichier
    df = pd.read_csv('data_cleaned.csv', index_col=0)
    X = df.drop(columns='Ewltp (g/km)')
    y = df['Ewltp (g/km)'] 

    #Diff√©renciation des colonnes num√©riques et cat√©gorielles 
    num_col_NA = ['m (kg)','ec (cm3)','ep (KW)','Fuel consumption ']
    num_col = ['m (kg)','ec (cm3)','ep (KW)','Fuel consumption ','Electric range (km)','Erwltp (g/km)']
    cat_col = ['Ct','fuel_type']

        
    #Gestion des valeurs manquantes
    imputer = SimpleImputer(missing_values=np.nan, strategy='median')
    X.loc[:,num_col_NA] = imputer.fit_transform(X[num_col_NA])

    #Encodage des variables cat√©gorielles
    oneh = OneHotEncoder(drop = 'first', sparse_output=False)
    X_encoded = oneh.fit_transform(X[cat_col])

    #Conversion en DataFrame
    noms_colonnes_cat = oneh.get_feature_names_out(cat_col)
    X_encoded = pd.DataFrame(X_encoded, columns=noms_colonnes_cat, index = X.index)

    #Standardisation des variables num√©riques
    scaler = StandardScaler()
    X_scaled = scaler.fit_transform(X[num_col])

    #Conversion en DataFrame
    noms_colonnes_num = scaler.get_feature_names_out(num_col)
    X_scaled = pd.DataFrame(X_scaled, columns=noms_colonnes_num, index = X.index)

    #Reconstition du tableau apr√®s encodage
    X.drop(columns=cat_col)
    X = pd.concat([X_encoded,X_scaled], axis = 1)
    #endregion

    #region pr√©dictions 
    if submit_button:
        # Transformation des donn√©es pour correspondre aux colonnes du mod√®le
        data = {
            "Ct_M1G": 1 if category == "Utilitaire" else 0,  # Exemple de transformation binaire
            "fuel_type_DHNR": 1 if fuel == "Diesel hybride non-rechargeable" else 0,
            "fuel_type_DHR": 1 if fuel == "Diesel hybride rechargeable" else 0,
            "fuel_type_E85F": 1 if fuel == "E85 FlexiFuel" else 0,
            "fuel_type_E85NR": 1 if fuel == "E85 non-rechargeable" else 0,
            "fuel_type_GN": 1 if fuel == "Gaz naturel" else 0,
            "fuel_type_GPL": 1 if fuel == "GPL" else 0,
            "fuel_type_P": 1 if fuel == "Essence" else 0,
            "fuel_type_PHNR": 1 if fuel == "Essence hybride non-rechargeable" else 0,
            "fuel_type_PHR": 1 if fuel == "Essence hybride rechargeable" else 0,
            "m (kg)": masse,
            "ec (cm3)": capacite_moteur,
            "ep (KW)": puiss_moteur,
            "Fuel consumption ": consommation,
            "Electric range (km)": autonomie_electrique,
            "Erwltp (g/km)": reduc_emission}
        
        input_df = pd.DataFrame([data])
        input_df[num_col]=scaler.transform(input_df[num_col])
        
        zip_path = "model.zip"
        with zipfile.ZipFile(zip_path,'r') as zip_ref:
            zip_ref.extractall()
        model_path= 'model'
        random_forest = joblib.load(model_path)
        pred = random_forest.predict(input_df)

     #region couleur r√©sultat
        if pred <= 101:
            color = '#048f18'
        elif pred <= 121:
            color = '#6cb71e'
        elif pred <= 141:
            color = '#c0d717'
        elif pred <= 161:
            color = '#fff11c'
        elif pred <= 201:
            color = '#f8bd19'
        elif pred <= 251:
            color = '#f0750d'
        else:
            color = '#d2000b'
    #endregion
        st.markdown(
                f"""
                <style>
                .centered {{
                    display: flex;
                    justify-content: center;
                    align-items: center;
                    height: 10vh;
                    font-size: 50px;
                    font-weight: bold;
                    background-color: {color}; 
                    color: black;  
                    border-radius: 10px;
                    padding: 20px;  /* pour ajouter du padding autour du texte */
                }}
                </style>
                <div class="centered">{np.round(pred[0], 1)} g / km</div>
                """,
                unsafe_allow_html=True
            )

    #endregion
